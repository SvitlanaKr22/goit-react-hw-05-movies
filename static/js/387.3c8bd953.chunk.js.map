{"version":3,"file":"static/js/387.3c8bd953.chunk.js","mappings":"iQACaA,EAAOC,EAAAA,GAAAA,GAAH,oEAKJC,EAAUD,EAAAA,GAAAA,EAAH,6C,SCwCpB,EAzCgB,WACd,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBAavB,OAXAC,EAAAA,EAAAA,IAAaR,EAASM,GACnBG,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPN,GAAW,OACNM,EAAQC,KAAI,kBAA8B,CAC3CC,OADa,EAAGA,OAEhBC,QAFa,EAAWA,QAGxBC,GAHa,EAAoBA,GAApB,KAMlB,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,EAAlB,IACP,WACLV,EAAWY,OACZ,CACF,GAAE,CAAClB,KAGF,8BACsB,IAAnBG,EAAQgB,QACP,SAACtB,EAAD,UACGM,EAAQQ,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACX,2BACE,qCAAaF,MACb,uBAAIC,MAFGC,EADE,OAQf,SAACf,EAAD,uDAIP,C,mMC3CKqB,EAAU,mCAGT,SAAeC,EAAtB,mDAAO,OAAP,oBAAO,WAA6BC,EAAYC,EAAajB,GAAtD,gGAEoBkB,EAAAA,EAAAA,IAAA,oBAAuBF,EAAvB,YAAqCC,GAAe,CACzEE,OAAQ,CACNC,QAASN,GAEXO,OAAQrB,EAAWqB,SANlB,cAEGC,EAFH,yBAQIA,EAASC,MARb,gCAUHZ,QAAQD,MAAR,MAVG,gFAcA,SAAec,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,gGAEoBP,EAAAA,EAAAA,IAAU,gBAAiB,CAChDC,OAAQ,CACNC,QAASN,EACTW,MAAAA,KALD,cAEGH,EAFH,yBAQIA,EAASC,MARb,gCAUHZ,QAAQD,MAAR,MAVG,gFAcA,SAAegB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEoBT,EAAAA,EAAAA,IAAA,iBAAoBS,GAAY,CACrDR,OAAQ,CACNC,QAASN,KAJV,cAEGQ,EAFH,yBAOIA,EAASC,MAPb,gCASHZ,QAAQD,MAAR,MATG,gFAaA,SAAekB,EAAtB,iDAAO,OAAP,oBAAO,WAA4BD,EAAU3B,GAAtC,gGAEoBkB,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAwC,CAC7DR,OAAQ,CACNC,QAASN,GAEXO,OAAQrB,EAAWqB,SANlB,cAEGC,EAFH,yBAQIA,EAASC,MARb,gCAUHZ,QAAQD,MAAR,MAVG,gFAcA,SAAeR,EAAtB,oC,aAAO,O,oBAAA,WAA4ByB,EAAU3B,GAAtC,gGAEoBkB,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAwC,CAC7DR,OAAQ,CACNC,QAASN,GAEXO,OAAQrB,EAAWqB,SANlB,cAEGC,EAFH,yBAQIA,EAASC,MARb,gCAUHZ,QAAQD,MAAR,MAVG,gFAzDPQ,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/fetchDateAboutMovies.js"],"sourcesContent":["import styled from 'styled-components';\nexport const List = styled.ul`\n  list-style: none;\n  padding-left: 20px;\n`;\n\nexport const Message = styled.p`\n  color: orangered;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from 'services/fetchDateAboutMovies';\nimport { List, Message } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    fetchReviews(movieId, controller)\n      .then(({ results }) => {\n        setReviews([\n          ...results.map(({ author, content, id }) => ({\n            author,\n            content,\n            id,\n          })),\n        ]);\n      })\n      .catch(error => console.error(error));\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length !== 0 ? (\n        <List>\n          {reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </List>\n      ) : (\n        <Message>We don't have anyreviews for this movie</Message>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '55908c20a8c5b517b5247533a2b5c98b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrending(media_type, time_window, controller) {\n  try {\n    const response = await axios.get(`/trending/${media_type}/${time_window}`, {\n      params: {\n        api_key: API_KEY,\n      },\n      signal: controller.signal,\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchSearch(query) {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchDetails(movie_id) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchCredits(movie_id, controller) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n      signal: controller.signal,\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchReviews(movie_id, controller) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n      signal: controller.signal,\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//https://api.themoviedb.org/3/movie/550?api_key=55908c20a8c5b517b5247533a2b5c98b\n"],"names":["List","styled","Message","movieId","useParams","useState","reviews","setReviews","useEffect","controller","AbortController","fetchReviews","then","results","map","author","content","id","catch","error","console","abort","length","API_KEY","fetchTrending","media_type","time_window","axios","params","api_key","signal","response","data","fetchSearch","query","fetchDetails","movie_id","fetchCredits"],"sourceRoot":""}