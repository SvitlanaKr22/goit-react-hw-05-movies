{"version":3,"file":"static/js/736.ffc39698.chunk.js","mappings":"iQAEaA,EAAOC,EAAAA,GAAAA,GAAH,+SAcJC,EAAUD,EAAAA,GAAAA,GAAH,uM,mBCuCpB,EAjDa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBAavB,OAZAC,EAAAA,EAAAA,IAAaV,EAASQ,GACnBG,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPR,GAAU,OACLQ,EAAKC,KAAI,kBAA4C,CACtDC,GADU,EAAGA,GAEbC,aAFU,EAAOA,aAGjBC,KAHU,EAAqBA,KAI/BC,UAJU,EAA2BA,UAA3B,KAOf,IACAC,OAAM,SAAAb,GAAK,OAAIC,EAASD,EAAMc,QAAnB,IACP,WACLX,EAAWY,OACZ,CACF,GAAE,CAACpB,KAGF,8BACIK,GAgBA,SAACgB,EAAA,EAAD,UAAehB,KAff,SAACR,EAAD,UACGM,EAAOU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACV,2BACE,gBACEK,IAAG,0CAAqCP,GACxCQ,IAAI,WAEN,UAACxB,EAAD,YACE,wBAAKiB,KACL,wCAAgBC,UAPXH,EADC,OAkBrB,C,oCCjDD,IAJqB,SAAC,GAAkB,IAAhBU,EAAe,EAAfA,SACtB,OAAO,cAAGC,MAAO,CAAEC,MAAO,aAAnB,SAAmCF,GAC3C,C,mMCAKG,EAAU,mCAGT,SAAeC,EAAtB,mDAAO,OAAP,oBAAO,WAA6BC,EAAYC,EAAatB,GAAtD,gGAEoBuB,EAAAA,EAAAA,IAAA,oBAAuBF,EAAvB,YAAqCC,GAAe,CACzEE,OAAQ,CACNC,QAASN,GAEXO,OAAQ1B,EAAW0B,SANlB,cAEGC,EAFH,yBAQIA,EAASC,MARb,gCAUHC,QAAQhC,MAAR,MAVG,gFAcA,SAAeiC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,gGAEoBR,EAAAA,EAAAA,IAAU,gBAAiB,CAChDC,OAAQ,CACNC,QAASN,EACTY,MAAAA,KALD,cAEGJ,EAFH,yBAQIA,EAASC,MARb,gCAUHC,QAAQhC,MAAR,MAVG,gFAcA,SAAemC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEoBV,EAAAA,EAAAA,IAAA,iBAAoBU,GAAY,CACrDT,OAAQ,CACNC,QAASN,KAJV,cAEGQ,EAFH,yBAOIA,EAASC,MAPb,gCASHC,QAAQhC,MAAR,MATG,gFAaA,SAAeK,EAAtB,iDAAO,OAAP,oBAAO,WAA4B+B,EAAUjC,GAAtC,gGAEoBuB,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAwC,CAC7DT,OAAQ,CACNC,QAASN,GAEXO,OAAQ1B,EAAW0B,SANlB,cAEGC,EAFH,yBAQIA,EAASC,MARb,gCAUHC,QAAQhC,MAAR,MAVG,gFAcA,SAAeqC,EAAtB,oC,aAAO,O,oBAAA,WAA4BD,EAAUjC,GAAtC,gGAEoBuB,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAwC,CAC7DT,OAAQ,CACNC,QAASN,GAEXO,OAAQ1B,EAAW0B,SANlB,cAEGC,EAFH,yBAQIA,EAASC,MARb,gCAUHC,QAAQhC,MAAR,MAVG,gFAzDP0B,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/ErrorMessage.jsx","services/fetchDateAboutMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  font-size: inherit;\n`;\n\nexport const Sublist = styled.ul`\n  list-style: none;\n  color: orangered;\n  padding-left: 10px;\n  margin-top: 10px;\n  margin-bottom: 20px;\n  line-height: 1.4;\n  font-size: inherit;\n  font-weight: 500;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCredits } from 'services/fetchDateAboutMovies';\nimport { List, Sublist } from './Cast.styled';\nimport ErrorMessage from 'components/ErrorMessage';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [actors, setActors] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetchCredits(movieId, controller)\n      .then(({ cast }) => {\n        setActors([\n          ...cast.map(({ id, profile_path, name, character }) => ({\n            id,\n            profile_path,\n            name,\n            character,\n          })),\n        ]);\n      })\n      .catch(error => setError(error.message));\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {!error ? (\n        <List>\n          {actors.map(({ id, profile_path, name, character }) => (\n            <li key={id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n                alt=\"actor\"\n              ></img>\n              <Sublist>\n                <li>{name}</li>\n                <li>Character: {character}</li>\n              </Sublist>\n            </li>\n          ))}\n        </List>\n      ) : (\n        <ErrorMessage>{error}</ErrorMessage>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","const ErrorMessage = ({ children }) => {\n  return <p style={{ color: 'orangered' }}>{children}</p>;\n};\n\nexport default ErrorMessage;\n","import axios from 'axios';\n\nconst API_KEY = '55908c20a8c5b517b5247533a2b5c98b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrending(media_type, time_window, controller) {\n  try {\n    const response = await axios.get(`/trending/${media_type}/${time_window}`, {\n      params: {\n        api_key: API_KEY,\n      },\n      signal: controller.signal,\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchSearch(query) {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchDetails(movie_id) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchCredits(movie_id, controller) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n      signal: controller.signal,\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchReviews(movie_id, controller) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n      signal: controller.signal,\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//https://api.themoviedb.org/3/movie/550?api_key=55908c20a8c5b517b5247533a2b5c98b\n"],"names":["List","styled","Sublist","movieId","useParams","useState","actors","setActors","error","setError","useEffect","controller","AbortController","fetchCredits","then","cast","map","id","profile_path","name","character","catch","message","abort","ErrorMessage","src","alt","children","style","color","API_KEY","fetchTrending","media_type","time_window","axios","params","api_key","signal","response","data","console","fetchSearch","query","fetchDetails","movie_id","fetchReviews"],"sourceRoot":""}